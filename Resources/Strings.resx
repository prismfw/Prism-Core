<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ApplicationEncounterUnhandledException" xml:space="preserve">
    <value>THE APPLICATION ENCOUNTERED AN UNHANDLED EXCEPTION - {0}</value>
  </data>
  <data name="ApplicationIsNotInitialized" xml:space="preserve">
    <value>Application has not been fully initialized.  Use a platform initializer to complete initialization.</value>
  </data>
  <data name="AttemptedToSetReadOnlyProperty" xml:space="preserve">
    <value>Attempted to set the value of read-only property '{0}'.</value>
  </data>
  <data name="CannotCombineZeroPaths" xml:space="preserve">
    <value>Cannot combine zero paths.</value>
  </data>
  <data name="CannotLocateEventWithNameAndHandlerForType" xml:space="preserve">
    <value>Cannot locate an event with the name '{0}' and the handler type '{1}' for the type {2}.</value>
  </data>
  <data name="CannotLocateEventWithNameForType" xml:space="preserve">
    <value>Cannot locate an event with the name '{0}' for the type {1}.</value>
  </data>
  <data name="CannotLocatePropertyWithNameAndTypeForType" xml:space="preserve">
    <value>Cannot locate a property with the name '{0}' and the type '{1}' for the type {2}.</value>
  </data>
  <data name="CannotOverrideMetadataOnReadOnlyProperty" xml:space="preserve">
    <value>Cannot override metadata on a read-only property.</value>
  </data>
  <data name="CannotPushExistingView" xml:space="preserve">
    <value>Cannot push a view that is already on the stack.</value>
  </data>
  <data name="CannotResolveIndexerForPathToken" xml:space="preserve">
    <value>Cannot resolve indexer for property path token '{0}'.</value>
  </data>
  <data name="CannotResolvePropertyPathForObject" xml:space="preserve">
    <value>Cannot resolve property path '{0}' for provided object.</value>
  </data>
  <data name="ControllerDoesNotImplementInterface" xml:space="preserve">
    <value>Controller does not implement {0}.</value>
  </data>
  <data name="ControllerLoadedAndReturnedPerspective" xml:space="preserve">
    <value>Controller successfully loaded and returned '{0}'.</value>
  </data>
  <data name="ControllerLoadFailedWithMessage" xml:space="preserve">
    <value>Controller load failed with message '{0}'.</value>
  </data>
  <data name="EventDescriptorAlreadyCreated" xml:space="preserve">
    <value>An EventDescriptor for the event '{0}' and owning type '{1}' has already been created.  Only one EventDescriptor is allowed per event.</value>
  </data>
  <data name="FailedToSetValueOnTargetProperty" xml:space="preserve">
    <value>Failed to set value '{0}' on target property '{1}'.  {2}</value>
  </data>
  <data name="FoundControllersWithNavAttributesPlural" xml:space="preserve">
    <value>Found {0} controller classes with navigation attributes.</value>
  </data>
  <data name="FoundControllersWithNavAttributesSingular" xml:space="preserve">
    <value>Found {0} controller class with navigation attributes.</value>
  </data>
  <data name="FoundViewsWithPerspectivesPlural" xml:space="preserve">
    <value>Found {0} view classes with proper view perspectives.</value>
  </data>
  <data name="FoundViewsWithPerspectivesSingular" xml:space="preserve">
    <value>Found {0} view class with proper view perspectives.</value>
  </data>
  <data name="InvalidHeightReturnedFromArrangement" xml:space="preserve">
    <value>NaN or infinity height returned from arrangement.</value>
  </data>
  <data name="InvalidHeightReturnedFromMeasurement" xml:space="preserve">
    <value>NaN or infinity height returned from measurement.</value>
  </data>
  <data name="InvalidWidthReturnedFromArrangement" xml:space="preserve">
    <value>NaN or infinity width returned from arrangement.</value>
  </data>
  <data name="InvalidWidthReturnedFromMeasurement" xml:space="preserve">
    <value>NaN or infinity width returned from measurement.</value>
  </data>
  <data name="LoadingControllerOfType" xml:space="preserve">
    <value>Loading controller of type {0}.</value>
  </data>
  <data name="ControllerModelTypeCannotBeNull" xml:space="preserve">
    <value>Controller's ModelType cannot be null.</value>
  </data>
  <data name="MatchedURIWithPattern" xml:space="preserve">
    <value>Matched URI {0} with pattern {1}.</value>
  </data>
  <data name="MetadataMustBeSameAsOrDeriveFromBase" xml:space="preserve">
    <value>Metadata type must be the same as, or derive from, base metadata type of {0}.</value>
  </data>
  <data name="NativeApplicationCouldNotBeResolved" xml:space="preserve">
    <value>The native application could not be resolved.</value>
  </data>
  <data name="NavigatingToControllerType" xml:space="preserve">
    <value>Navigating to controller type {0}.</value>
  </data>
  <data name="NavigatingToURI" xml:space="preserve">
    <value>Navigating to {0}.</value>
  </data>
  <data name="NoControllerFoundForURI" xml:space="preserve">
    <value>No controller was found for URI {0}.</value>
  </data>
  <data name="NullReuseIdReturned" xml:space="preserve">
    <value>Null reuse identifier returned.</value>
  </data>
  <data name="NullViewPerspectiveReturned" xml:space="preserve">
    <value>Null view perspective given.  Cannot output a view.  If this was intentional, then this message can be ignored.</value>
  </data>
  <data name="ObjectIsNotADescendant" xml:space="preserve">
    <value>Object is not a descendant of this instance.</value>
  </data>
  <data name="ObjectIsNotAnAncestor" xml:space="preserve">
    <value>Object is not an ancestor of this instance.</value>
  </data>
  <data name="OneColorMinimum" xml:space="preserve">
    <value>At least one color must be specified.</value>
  </data>
  <data name="OwnerTypeDoesNotMatchCurrentType" xml:space="preserve">
    <value>Owner type does not match type of current instance.</value>
  </data>
  <data name="PlatformInitialized" xml:space="preserve">
    <value>Platform successfully initialized.  Running {0} v{1} on {2}.</value>
  </data>
  <data name="PropertyDescriptorAlreadyCreated" xml:space="preserve">
    <value>A PropertyDescriptor for the property {0} and owning type {1} has already been created.  Only one PropertyDescriptor is allowed per property.</value>
  </data>
  <data name="PropertyIsReadOnly" xml:space="preserve">
    <value>Property '{0}' is read-only.</value>
  </data>
  <data name="PropertyMetadataHasBeenSealed" xml:space="preserve">
    <value>Property metadata has been sealed and cannot be modified.</value>
  </data>
  <data name="PropertyPathArgumentExceedsBounds" xml:space="preserve">
    <value>Property path contains an argument that exceeds the upper or lower bounds of the path parameters.</value>
  </data>
  <data name="PropertyPathContainsUnmatchedClosingBracket" xml:space="preserve">
    <value>Property path contains a closing bracket without a corresponding opening bracket.</value>
  </data>
  <data name="PropertyPathContainsUnmatchedOpeningBracket" xml:space="preserve">
    <value>Property path contains an opening bracket without a corresponding closing bracket.</value>
  </data>
  <data name="ReadyToOutputViewOfType" xml:space="preserve">
    <value>Ready to output view of type {0}.</value>
  </data>
  <data name="RectangleContainsNaNOrInfiniteValue" xml:space="preserve">
    <value>Rectangle contains a NaN or infinite value.</value>
  </data>
  <data name="RectangleSizeContainsNegativeValue" xml:space="preserve">
    <value>Rectangle size contains a negative value.</value>
  </data>
  <data name="RegisteredTypesToIoCContainerPlural" xml:space="preserve">
    <value>Registered {0} types to IoC container.</value>
  </data>
  <data name="RegisteredTypesToIoCContainerSingular" xml:space="preserve">
    <value>Registered {0} type to IoC container.</value>
  </data>
  <data name="TypeCouldNotBeResolved" xml:space="preserve">
    <value>Type '{0}' could not be resolved.</value>
  </data>
  <data name="TypeHasMetadata" xml:space="preserve">
    <value>Type already has metadata specified.</value>
  </data>
  <data name="TypeMustResolveToType" xml:space="preserve">
    <value>Type '{0}' must resolve to an object of type '{1}'.</value>
  </data>
  <data name="UnableToLocateViewStack" xml:space="preserve">
    <value>Unable to locate a view stack for the view.</value>
  </data>
  <data name="UnableToLocateViewWithPerspectiveAndModelType" xml:space="preserve">
    <value>Unable to locate a view with perspective '{0}' and model type {1}.  Canceling output.</value>
  </data>
  <data name="ValueCannotBeInfinity" xml:space="preserve">
    <value>Value cannot be infinity.</value>
  </data>
  <data name="ValueCannotBeLessThanZero" xml:space="preserve">
    <value>Value cannot be less than zero.</value>
  </data>
  <data name="ValueCannotBeNaNOrInfinity" xml:space="preserve">
    <value>Value cannot be NaN or infinity.</value>
  </data>
  <data name="ValueCannotBeNaNOrNegativeInfinity" xml:space="preserve">
    <value>Value cannot be NaN or negative infinity.</value>
  </data>
  <data name="ValueCannotBeNullEmptyOrWhitespace" xml:space="preserve">
    <value>Value cannot be null, empty, or whitespace-only.</value>
  </data>
  <data name="ViewIsNotPartOfStack" xml:space="preserve">
    <value>View is not a part of the stack.</value>
  </data>
  <data name="ARGB" xml:space="preserve">
    <value>A: {0}, R: {1}, G: {2}, B: {3}</value>
  </data>
  <data name="LeftTopRightBottom" xml:space="preserve">
    <value>Left: {0}, Top: {1}, Right: {2}, Bottom: {3}</value>
  </data>
  <data name="NameValue" xml:space="preserve">
    <value>Name: {0}, Value: {1}</value>
  </data>
  <data name="WidthHeight" xml:space="preserve">
    <value>Width: {0}, Height: {1}</value>
  </data>
  <data name="XY" xml:space="preserve">
    <value>X: {0}, Y: {1}</value>
  </data>
  <data name="XYWidthHeight" xml:space="preserve">
    <value>X: {0}, Y: {1}, Width: {2}, Height: {3}</value>
  </data>
  <data name="ValueCannotBeLessThanOne" xml:space="preserve">
    <value>Value cannot be less than 1.</value>
  </data>
  <data name="PresenterAlreadyPresentingPopup" xml:space="preserve">
    <value>The specified object is already presenting a popup.  Only one popup may be presented by an object at a time.</value>
  </data>
  <data name="PopupCannotPresentSelf" xml:space="preserve">
    <value>A popup cannot present itself.</value>
  </data>
  <data name="SizeContainsNaNOrInfiniteValue" xml:space="preserve">
    <value>Size contains a NaN or infinite value.</value>
  </data>
  <data name="SizeContainsNegativeValue" xml:space="preserve">
    <value>Size contains a negative value.</value>
  </data>
  <data name="Identity" xml:space="preserve">
    <value>Identity</value>
  </data>
  <data name="Auto" xml:space="preserve">
    <value>Auto</value>
  </data>
  <data name="MetadataCanOnlyBeAppliedToPropertiesOwnedByType" xml:space="preserve">
    <value>Metadata of type {0} can only be applied to properties owned by types that are derived from {1}.</value>
  </data>
  <data name="TypeRegistrationNotFound" xml:space="preserve">
    <value>A type registration with the type {0} and the name '{1}' could not be found.</value>
  </data>
  <data name="TypeRegistrationAlreadyExists" xml:space="preserve">
    <value>A type registration with the type {0} and the name '{1}' already exists.</value>
  </data>
  <data name="MoreThanOneElementInSequence" xml:space="preserve">
    <value>More than one element was found in the sequence.</value>
  </data>
  <data name="ResourceCouldNotBeFound" xml:space="preserve">
    <value>A resource with the specified key could not be found.</value>
  </data>
  <data name="FailedToSetResourceValueOnProperty" xml:space="preserve">
    <value>Failed to set resource value '{0}' on property '{1}'.  {2}</value>
  </data>
  <data name="ResourceMustBeOfType" xml:space="preserve">
    <value>Resource must be of type {0}.</value>
  </data>
  <data name="ResourceKeyCanOnlyBeOfType" xml:space="preserve">
    <value>Resource key can only be of type {0} or {1}.</value>
  </data>
  <data name="DataBindingError" xml:space="preserve">
    <value>An error has occurred in a data binding: {0}</value>
  </data>
  <data name="PathFigureCannotHaveMultipleOwners" xml:space="preserve">
    <value>Path figure already belongs to another path.  Path figures can be a part of only one path at a time.</value>
  </data>
  <data name="PathSegmentCannotHaveMultipleOwners" xml:space="preserve">
    <value>Path segment already belongs to another path.  Path segments can be a part of only one path at a time.</value>
  </data>
  <data name="CannotLocateResolveAttribute" xml:space="preserve">
    <value>Cannot locate a ResolveAttribute for the type {0}.</value>
  </data>
  <data name="ObjectTypeDoesNotMatchRequiredType" xml:space="preserve">
    <value>Given object of type '{0}' does not match required type of '{1}'.</value>
  </data>
  <data name="PropertyMissingGetter" xml:space="preserve">
    <value>Property '(0}' does not have a getter.</value>
  </data>
  <data name="PropertyMissingSetter" xml:space="preserve">
    <value>Property '{0}' does not have a setter.</value>
  </data>
  <data name="CannotConvertObjectToType" xml:space="preserve">
    <value>Cannot convert object of type {0} to {1}.</value>
  </data>
  <data name="OnlyTwoInputTypesSupported" xml:space="preserve">
    <value>Only {0} and {1} are supported for {2}.</value>
  </data>
</root>